/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import { getClassByName as g } from "./interfaces/common.mjs";
import { base as i, inputs as f, sizeMap as c, states as u, containers as z, elements as G, fillModeMap as x, roundedMap as v, orientationMap as b } from "./json-classes.mjs";
const s = `${i.prefix}-${f.input}`, y = `${i.prefix}-${f.maskedtextbox}`, m = `${i.prefix}-${f.radio}`, N = `${i.prefix}-${f.textbox}`, h = `${i.prefix}-${f.input}-${f.prefix}`, p = `${i.prefix}-${f.input}-${f.suffix}`, C = {
  input: {
    radio: m,
    size: {
      prefix: `${m}-`,
      small: `${m}-${c.small}`,
      medium: `${m}-${c.medium}`,
      large: `${m}-${c.large}`
    },
    invalid: `${i.prefix}-${u.invalid}`,
    checked: `${i.prefix}-${u.checked}`
  },
  wrap: `${m}-${z.wrap}`,
  label: `${m}-${G.label}`
}, j = {
  input: (d) => {
    var $;
    const { size: t, invalid: a, checked: l, c: o = C } = d, n = o.input;
    return {
      [n == null ? void 0 : n.radio]: !0,
      [n == null ? void 0 : n.size[t]]: n == null ? void 0 : n.size[t],
      [`${($ = n == null ? void 0 : n.size) == null ? void 0 : $.prefix}${t}`]: t && !(n != null && n.size[t]),
      [n == null ? void 0 : n.invalid]: a,
      [n == null ? void 0 : n.checked]: l
    };
  },
  label: (d) => {
    const { c: t = C } = d;
    return {
      [t == null ? void 0 : t.label]: !0
    };
  },
  wrap: (d) => {
    const { c: t = C } = d;
    return {
      [t == null ? void 0 : t.wrap]: !0
    };
  }
}, B = {
  ul: {
    main: `${m}-${z.list}`,
    horizontal: `${i.prefix}-${z.list}-${u.horizontal}`,
    vertical: `${i.prefix}-${z.list}-${u.vertical}`
  },
  item: {
    main: `${m}-${z.list}-${z.item}`,
    disabled: `${i.prefix}-${u.disabled}`
  }
}, A = {
  ul: (d) => {
    const { horizontal: t, vertical: a, c: l = B } = d, o = l.ul;
    return {
      [o == null ? void 0 : o.main]: !0,
      [o == null ? void 0 : o.horizontal]: t,
      [o == null ? void 0 : o.vertical]: a
    };
  },
  item: (d) => {
    const { disabled: t, c: a = B } = d, l = a.item;
    return {
      [l == null ? void 0 : l.main]: !0,
      [l == null ? void 0 : l.disabled]: t
    };
  }
}, R = {
  wrapper: {
    main: y,
    input: s,
    size: {
      small: `${s}-${c.small}`,
      medium: `${s}-${c.medium}`,
      large: `${s}-${c.large}`
    },
    fillMode: {
      solid: `${s}-${x.solid}`,
      outline: `${s}-${x.outline}`,
      flat: `${s}-${x.flat}`
    },
    rounded: {
      small: `${i.prefix}-${i.rounded}-${v.small}`,
      medium: `${i.prefix}-${i.rounded}-${v.medium}`,
      large: `${i.prefix}-${i.rounded}-${v.large}`
    },
    disabled: `${i.prefix}-${u.disabled}`,
    invalid: `${i.prefix}-${u.invalid}`,
    isRtl: `${i.prefix}-${i.rtl}`
  },
  inputInner: `${s}-${f.inner}`
}, D = {
  wrapper: (d) => {
    const { invalid: t, disabled: a, size: l, fillMode: o, rounded: n, c: $ = R } = d, r = $.wrapper;
    return {
      [r.main]: !0,
      [r.input]: !0,
      [r.size[l]]: r.size[l],
      [`${s}-${l}`]: !r.size[l],
      [r.fillMode[o]]: r.fillMode[o],
      [r.rounded[n]]: r.rounded[n],
      [`${i.prefix}-${i.rounded}-${n}`]: n && !r.rounded[n],
      [r.disabled]: a,
      [r.invalid]: t
    };
  },
  inputInner: g(R, "inputInner")
}, M = {
  wrapper: {
    main: N,
    input: s,
    size: {
      small: `${s}-${c.small}`,
      medium: `${s}-${c.medium}`,
      large: `${s}-${c.large}`
    },
    fillMode: {
      solid: `${s}-${x.solid}`,
      outline: `${s}-${x.outline}`,
      flat: `${s}-${x.flat}`
    },
    rounded: {
      small: `${i.prefix}-${i.rounded}-${v.small}`,
      medium: `${i.prefix}-${i.rounded}-${v.medium}`,
      large: `${i.prefix}-${i.rounded}-${v.large}`
    },
    disabled: `${i.prefix}-${u.disabled}`,
    focused: `${i.prefix}-${u.focus}`,
    required: `${i.prefix}-${u.required}`,
    invalid: `${i.prefix}-${u.invalid}`,
    isRtl: `${i.prefix}-${i.rtl}`
  },
  inputInner: `${s}-${f.inner}`,
  prefix: {
    main: h,
    orientation: {
      horizontal: `${h}-${b.horizontal}`,
      vertical: `${h}-${b.vertical}`
    }
  },
  suffix: {
    main: p,
    orientation: {
      horizontal: `${p}-${b.horizontal}`,
      vertical: `${p}-${b.vertical}`
    }
  }
}, E = {
  wrapper: (d) => {
    const { disabled: t, invalid: a, focused: l, required: o, size: n, fillMode: $, rounded: r, isRtl: q, c: T = M } = d, e = T.wrapper;
    return {
      [e == null ? void 0 : e.main]: !0,
      [e == null ? void 0 : e.input]: !0,
      [e == null ? void 0 : e.size[n]]: e == null ? void 0 : e.size[n],
      [`${s}-${n}`]: n && !(e != null && e.size[n]),
      [e == null ? void 0 : e.fillMode[$]]: e == null ? void 0 : e.fillMode[$],
      [e == null ? void 0 : e.rounded[r]]: e == null ? void 0 : e.rounded[r],
      [`${i.prefix}-${i.rounded}-${r}`]: r && !(e != null && e.rounded[r]),
      [e == null ? void 0 : e.disabled]: t,
      [e == null ? void 0 : e.focused]: l,
      [e == null ? void 0 : e.required]: o,
      [e == null ? void 0 : e.invalid]: a,
      [e == null ? void 0 : e.isRtl]: q
    };
  },
  inputInner: g(M, "inputInner"),
  prefix: (d) => {
    const { orientation: t, c: a = M } = d, l = a.prefix;
    return {
      [l.main]: !0,
      [l.orientation[t]]: l.orientation[t]
    };
  },
  suffix: (d) => {
    const { orientation: t, c: a = M } = d, l = a.suffix;
    return {
      [l == null ? void 0 : l.main]: !0,
      [l == null ? void 0 : l.orientation[t]]: l == null ? void 0 : l.orientation[t]
    };
  }
}, k = {
  input: {
    main: `${s} ${s}-${c.medium} ${i.prefix}-${i.rounded}-${v.medium} ${s}-${x.solid}`,
    disabled: `${i.prefix}-${u.disabled}`,
    required: `${i.prefix}-${u.required}`,
    invalid: `${i.prefix}-${u.invalid}`,
    isRtl: `${i.prefix}-${i.rtl}`
  },
  clearButton: `${i.prefix}-${i.clear}-${i.value}`
}, F = {
  input: (d) => {
    const { disabled: t, invalid: a, required: l, isRtl: o, c: n = k } = d, $ = n.input;
    return {
      [$ == null ? void 0 : $.main]: !0,
      [$ == null ? void 0 : $.disabled]: t,
      [$ == null ? void 0 : $.required]: l,
      [$ == null ? void 0 : $.invalid]: a,
      [$ == null ? void 0 : $.isRtl]: o
    };
  },
  clearButton: g(k, "clearButton")
};
export {
  C as radioButtonClasses,
  B as radioGroupClasses,
  F as uInput,
  D as uMaskedTextBox,
  j as uRadioButton,
  A as uRadioGroup,
  E as uTextBox
};
