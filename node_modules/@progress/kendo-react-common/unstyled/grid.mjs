/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import { gridPrefix as n, sizeMap as u, base as t, grid as l, containers as p, elements as a, states as o, dimensions as f, cursor as b } from "./json-classes.mjs";
const $ = {
  wrapper: {
    main: n,
    size: {
      small: `${n}-${u.small}`,
      medium: `${n}-${u.medium}`
    },
    virtual: `${n}-${t.virtual}`
  },
  ariaRoot: `${n}-${l.ariaRoot}`,
  container: `${n}-${p.container}`,
  content: {
    main: `${n}-${p.content}`,
    virtual: `${t.prefix}-${t.virtual}-${p.content}`
  },
  tableWrap: `${n}-${l.tableWrap}`,
  table: {
    main: `${t.prefix}-${a.table}`,
    gridTable: `${n}-${a.table}`,
    size: {
      small: `${t.prefix}-${a.table}-${u.small}`,
      medium: `${t.prefix}-${a.table}-${u.medium}`
    }
  },
  tbody: `${t.prefix}-${a.table}-${a.tbody}`,
  thead: {
    main: `${n}-${a.table}-${a.thead}`,
    draggable: `${n}-${o.draggable}-${a.header}`
  },
  header: {
    main: `${n}-${a.header}`,
    draggable: `${n}-${o.draggable}-${a.header}`
  },
  headerWrap: `${n}-${a.header}-${p.wrap}`,
  headerTable: {
    main: `${t.prefix}-${a.table}`,
    header: `${n}-${a.header}-${a.table}`,
    size: {
      small: `${t.prefix}-${a.table}-${u.small}`,
      medium: `${t.prefix}-${a.table}-${u.medium}`
    }
  },
  headerTh: {
    main: `${t.prefix}-${a.table}-${a.th}`,
    header: `${t.prefix}-${a.header}`,
    first: `${t.prefix}-${o.first}`,
    filterable: `${t.prefix}-${o.filterable}`,
    locked: `${n}-${a.header}-${o.sticky}`,
    sorted: `${t.prefix}-${o.sorted}`
  },
  tableThead: `${t.prefix}-${a.table}-${a.thead}`,
  heightContainer: `${t.prefix}-${f.height}-${p.container}`,
  sortIcon: `${t.prefix}-${o.sort}-${a.icon}`,
  sortOrder: `${t.prefix}-${o.sort}-${o.order}`,
  tr: {
    main: `${t.prefix}-${a.table}-${l.row}`,
    header: `${t.prefix}-${a.table}-${l.group}-${l.row}`,
    grouping: `${t.prefix}-${o.grouping}-${l.row}`,
    footer: `${t.prefix}-${l.group}-${a.footer}`,
    master: `${t.prefix}-${l.master}-${l.row}`,
    rowAlt: `${t.prefix}-${a.table}-${o.alt}-${l.row}`,
    alt: `${t.prefix}-${o.alt}`,
    selected: `${t.prefix}-${o.selected}`,
    isInEdit: `${n}-${o.edit}-${l.row}`
  },
  detailTr: {
    main: `${t.prefix}-${a.table}-${l.row}`,
    row: `${t.prefix}-${l.detail}-${l.row}`,
    rowAlt: `${t.prefix}-${a.table}-${o.alt}-${l.row}`,
    alt: `${t.prefix}-${o.alt}`
  },
  simpleTr: `${t.prefix}-${a.table}-${l.row}`,
  headerCellInner: `${t.prefix}-${l.cellInner}`,
  columnTitle: `${t.prefix}-${l.column}-${a.title}`,
  headerCellLink: {
    main: `${t.prefix}-${a.link}`,
    notSortable: `${t.important}${t.prefix}-${b.default}`
  },
  noRecords: `${n}-${l.noRecords}`,
  noRecordsTemplate: `${n}-${l.noRecords}-${o.template}`,
  pager: `${n}-${l.pager}`,
  sorted: `${t.prefix}-${o.sorted}`,
  contentSticky: `${n}-${p.content}-${o.sticky}`,
  hierarchyCell: {
    main: `${t.prefix}-${l.hierarchy}-${l.cell}`,
    header: `${t.prefix}-${a.header}`
  },
  td: {
    main: `${t.prefix}-${a.table}-${a.td}`,
    selected: `${t.prefix}-${o.selected}`
  },
  detailTd: {
    main: `${t.prefix}-${a.table}-${a.td}`,
    cell: `${t.prefix}-${l.detail}-${l.cell}`
  },
  editTd: {
    main: `${t.prefix}-${a.table}-${a.td}`,
    cell: `${n}-${o.edit}-${l.cell}`,
    selected: `${t.prefix}-${o.selected}`
  },
  hierarchyTd: {
    main: `${t.prefix}-${a.table}-${a.td}`,
    cell: `${t.prefix}-${l.hierarchy}-${l.cell}`
  }
}, g = {
  wrapper: (r) => {
    const { size: e, virtual: i, c = $.wrapper } = r;
    return {
      [c.main]: !0,
      [c.size[e]]: c.size[e],
      [`${n}-${e}`]: e && !c.size[e],
      [c.virtual]: i
    };
  },
  ariaRoot: (r) => {
    const { c: e = $ } = r;
    return e.ariaRoot;
  },
  container: (r) => {
    const { c: e = $ } = r;
    return e.container;
  },
  content: (r) => {
    const { c: e = $.content } = r;
    return {
      [e.main]: !0,
      [e.virtual]: !0
    };
  },
  tableWrap: (r) => {
    const { c: e = $ } = r;
    return e.tableWrap;
  },
  table: (r) => {
    const { size: e, c: i = $.table } = r;
    return {
      [i.main]: !0,
      [i.gridTable]: !0,
      [i.size[e]]: i.size[e],
      [`${t.prefix}-${a}-${e}`]: !i.size[e]
    };
  },
  tbody: (r) => {
    const { c: e = $ } = r;
    return e.tbody;
  },
  thead: (r) => {
    const { draggable: e, c: i = $.thead } = r;
    return {
      [i.main]: !0,
      [i.draggable]: e
    };
  },
  header: (r) => {
    const { draggable: e, c: i = $.header } = r;
    return {
      [i.main]: !0,
      [i.draggable]: e
    };
  },
  headerWrap: (r) => {
    const { c: e = $ } = r;
    return e.headerWrap;
  },
  headerTable: (r) => {
    const { size: e, c: i = $.headerTable } = r;
    return {
      [i.main]: !0,
      [i.header]: !0,
      [i.size[e]]: i.size[e],
      [`${t.prefix}-${a.table}-${e}`]: !i.size[e]
    };
  },
  headerTh: (r) => {
    const { first: e, filterable: i, locked: c, sorted: h, c: s = $.headerTh } = r;
    return {
      [s.main]: !0,
      [s.header]: !0,
      [s.first]: e,
      [s.filterable]: i,
      [s.locked]: c,
      [s.sorted]: h
    };
  },
  tableThead: (r) => {
    const { c: e = $ } = r;
    return e.tableThead;
  },
  heightContainer: (r) => {
    const { c: e = $ } = r;
    return e.heightContainer;
  },
  sortIcon: (r) => {
    const { c: e = $ } = r;
    return e.sortIcon;
  },
  sortOrder: (r) => {
    const { c: e = $ } = r;
    return e.sortOrder;
  },
  tr: (r) => {
    const { isHeader: e, isFooter: i, isMaster: c, isAltRow: h, selected: s, isInEdit: m, c: d = $.tr } = r;
    return {
      [d.main]: !0,
      [d.header]: e,
      [d.grouping]: e,
      [d.footer]: i,
      [d.master]: c,
      [d.rowAlt]: c && h,
      [d.alt]: c && h,
      [d.selected]: s,
      [d.isInEdit]: m
    };
  },
  detailTr: (r) => {
    const { isAlt: e, c: i = $.detailTr } = r;
    return {
      [i.main]: !0,
      [i.row]: !0,
      [i.rowAlt]: e,
      [i.alt]: e
    };
  },
  simpleTr: (r) => {
    const { c: e = $ } = r;
    return e.simpleTr;
  },
  headerCellInner: (r) => {
    const { c: e = $ } = r;
    return e.headerCellInner;
  },
  columnTitle: (r) => {
    const { c: e = $ } = r;
    return e.columnTitle;
  },
  headerCellLink: (r) => {
    const { sortable: e, c: i = $.headerCellLink } = r;
    return {
      [i.main]: !0,
      [i.notSortable]: !e
    };
  },
  noRecords: (r) => {
    const { c: e = $ } = r;
    return e.noRecords;
  },
  noRecordsTemplate: (r) => {
    const { c: e = $ } = r;
    return e.noRecordsTemplate;
  },
  pager: (r) => {
    const { c: e = $ } = r;
    return e.pager;
  },
  sorted: (r) => {
    const { c: e = $ } = r;
    return e.sorted;
  },
  contentSticky: (r) => {
    const { locked: e, c: i = $ } = r;
    return {
      [i.contentSticky]: e
    };
  },
  hierarchyCell: (r) => {
    const { c: e = $.hierarchyCell } = r;
    return {
      [e.main]: !0,
      [e.header]: !0
    };
  },
  td: (r) => {
    const { selected: e, c: i = $.td } = r;
    return {
      [i.main]: !0,
      [i.selected]: e
    };
  },
  detailTd: (r) => {
    const { c: e = $.detailTd } = r;
    return {
      [e.main]: !0,
      [e.cell]: !0
    };
  },
  editTd: (r) => {
    const { selected: e, c: i = $.editTd } = r;
    return {
      [i.main]: !0,
      [i.cell]: !0,
      [i.selected]: e
    };
  },
  hierarchyTd: (r) => {
    const { c: e = $.hierarchyTd } = r;
    return {
      [e.main]: !0,
      [e.cell]: !0
    };
  }
};
export {
  g as uGrid
};
