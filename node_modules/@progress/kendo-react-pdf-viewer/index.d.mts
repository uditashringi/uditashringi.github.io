/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
import { currentPage } from '@progress/kendo-pdfviewer-common';
import * as React_2 from 'react';
import { SaveOptions } from '@progress/kendo-file-saver';
import { ToolbarProps } from '@progress/kendo-react-buttons';
import { TypedArray } from '@progress/kendo-pdfviewer-common';

export { currentPage }

/**
 * The KendoReact [PDF Viewer]({% slug api_pdf-viewer_pdfviewer %}) DownloadEvent object.
 */
export declare interface DownloadEvent extends PDFViewerEvent {
    /**
     * The Blob object.
     */
    blob: Blob;
    /**
     * The name which will be used for saving the file.
     */
    fileName: string;
    /**
     * The options which will be used for saving the file.
     */
    saveOptions: SaveOptions;
}

/**
 * The KendoReact [PDF Viewer]({% slug api_pdf-viewer_pdfviewer %}) ErrorEvent object.
 */
declare interface ErrorEvent_2 extends PDFViewerEvent {
    /**
     * The raised error.
     */
    error: Error | {
        message: string;
    };
}
export { ErrorEvent_2 as ErrorEvent }

/**
 * The KendoReact [PDF Viewer]({% slug api_pdf-viewer_pdfviewer %}) LoadEvent object.
 */
export declare interface LoadEvent extends PDFViewerEvent {
}

/**
 * The KendoReact [PDF Viewer]({% slug api_pdf-viewer_pdfviewer %}) PageEvent object.
 */
export declare interface PageEvent extends PDFViewerEvent {
    /**
     * The page number.
     */
    page: number;
    /**
     * A React `SyntheticEvent`.
     */
    syntheticEvent: React_2.SyntheticEvent<any>;
}

/**
 * Represents the [KendoReact PDF Viewer component]({% slug api_pdf-viewer_pdfviewerprops %}).
 *
 * @example
 * ```jsx
 * function App() {
 *  return <PDFViewer url="sample.pdf" />;
 * }
 *  ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export declare const PDFViewer: React_2.ForwardRefExoticComponent<PDFViewerProps & React_2.RefAttributes<PDFViewerHandle | null>>;

declare interface PDFViewerEvent {
    /**
     * The event target object.
     */
    target: PDFViewerHandle;
}

/**
 * Represents the object which is passed to the [`ref`](https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom)
 * callback of the [PDF Viewer]({% slug api_pdf-viewer_pdfviewer %}) component.
 */
export declare interface PDFViewerHandle {
    /**
     * The root DOM element of the PDF Viewer component.
     */
    element: HTMLDivElement | null;
    /**
     * The props of the PDF Viewer component.
     */
    props: PDFViewerProps;
    /**
     * The `PDF.js` document loaded in the PDF Viewer component.
     */
    document: any;
    /**
     * The `PDF.js` pages loaded in the PDF Viewer component.
     */
    pages: any[];
}

/**
 * The props of the KendoReact [PDF Viewer]({% slug api_pdf-viewer_pdfviewer %}) component.
 */
export declare interface PDFViewerProps {
    /**
     * Represents the url of the PDF file.
     */
    url?: string;
    /**
     * Represents the data of the PDF file in Base64 format.
     */
    data?: string;
    /**
     * Represents the raw binary data buffer of the PDF file.
     */
    arrayBuffer?: ArrayBuffer;
    /**
     * Represents the data of the PDF file in typed array format.
     */
    typedArray?: TypedArray;
    /**
     * Represents the additional styles which will be added to the PDF Viewer component.
     */
    style?: React_2.CSSProperties;
    /**
     * Represents the file name used to save the file when the user clicks the download tool.
     */
    saveFileName?: string;
    /**
     * Represents the options for saving the file when the user clicks the download tool.
     */
    saveOptions?: SaveOptions;
    /**
     * Represents the tools collection rendered in the toolbar.
     *
     * @default - ['pager', 'spacer', 'zoomInOut', 'zoom', 'selection', 'spacer', 'search', 'open', 'download', 'print']
     */
    tools?: PDFViewerTool[];
    /**
     * Represents the zoom levels populated in the ComboBox component.
     */
    zoomLevels?: {
        id: number;
        priority: number;
        value: number;
        text: string;
        type: string;
        locationString?: string;
    }[];
    /**
     * Represents the zoom value of the document.
     */
    zoom?: number;
    /**
     * Represents the default zoom value.
     */
    defaultZoom?: number;
    /**
     * Represents the minimum zoom value.
     */
    minZoom?: number;
    /**
     * Represents the maximum zoom value.
     */
    maxZoom?: number;
    /**
     * Represents the zoom rate value.
     */
    zoomRate?: number;
    /**
     * Fires when an error occurs.
     */
    onError?: (event: ErrorEvent_2) => void;
    /**
     * Fires when a PDF document has been loaded.
     */
    onLoad?: (event: LoadEvent) => void;
    /**
     * Fires when the download tool has been clicked. To prevent the download, return `false`.
     */
    onDownload?: (event: DownloadEvent) => boolean | void;
    /**
     * Fires when the zoom has changed.
     */
    onZoom?: (event: ZoomEvent) => void;
    /**
     * Fires when the page has changed.
     */
    onPageChange?: (event: PageEvent) => void;
    /**
     * Fires when the toolbar component is about to be rendered. Use it to override the default appearance of the toolbar.
     */
    onRenderToolbar?: (defaultRendering: React_2.ReactElement<ToolbarProps>) => React_2.ReactNode;
    /**
     * Fires when the content component is about to be rendered. Use it to override the default appearance of the content.
     */
    onRenderContent?: (defaultRendering: React_2.ReactElement<HTMLDivElement>) => React_2.ReactNode;
    /**
     * Fires when the loading indication component is about to be rendered. Use it to override the default appearance of the loading.
     */
    onRenderLoader?: (defaultRendering: React_2.ReactElement<HTMLDivElement> | null) => React_2.ReactNode;
}

export declare type PDFViewerTool = 'pager' | 'spacer' | 'zoomInOut' | 'zoom' | 'selection' | 'search' | 'open' | 'download' | 'print';

/**
 * Scrolls the PDF Viewer document to the passed page number.
 *
 * @param rootElement The root HTML element of the PDF Viewer component.
 * @param pageNumber The page number.
 *
 * @example
 * ```jsx
 * function App() {
 * const pdfRef = React.useRef(null);
 * const handleClick = () => {
 *   scrollToPage(pdfRef.current.element, 3);
 * };
 * return (
 *   <div>
 *     <Button onClick={handleClick} >
 *       Scroll to Page 3
 *     </Button>
 *     <PDFViewer
 *       ref={pdfRef}
 *     />
 *   </div>
 *   )
 * }
 * ```
 */
export declare const scrollToPage: (rootElement: HTMLElement, pageNumber: number) => void;

/**
 * The KendoReact [PDF Viewer]({% slug api_pdf-viewer_pdfviewer %}) ZoomEvent object.
 */
export declare interface ZoomEvent extends PDFViewerEvent {
    /**
     * The zoom value.
     */
    zoom: number;
    /**
     * A React `SyntheticEvent`.
     */
    syntheticEvent: React_2.SyntheticEvent<any>;
}

export { }
