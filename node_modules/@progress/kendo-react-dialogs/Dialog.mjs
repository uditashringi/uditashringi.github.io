/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as o from "react";
import * as b from "react-dom";
import s from "prop-types";
import { DialogTitleBar as k } from "./DialogTitleBar.mjs";
import { DialogActionsBar as c } from "./DialogActionsBar.mjs";
import { dispatchEvent as F, Keys as A, keepFocusInContainer as N, validatePackage as S, shouldShowValidationUI as O, getActiveElement as L, ZIndexContext as d, FOCUSABLE_ELEMENTS as P, focusFirstFocusableChild as Z, classNames as _, WatermarkOverlay as B, canUseDOM as M, createPropsContext as K, withIdHOC as U, withPropsContext as z } from "@progress/kendo-react-common";
import { packageMetadata as p } from "./package-metadata.mjs";
import { getMaxZIndex as G } from "./utils.mjs";
import { DEFAULT_DIALOGS_ZINDEX as R, ZINDEX_DIALOGS_STEP as h, DATA_DIALOGS_ID as W } from "./constants.mjs";
const i = class i extends o.Component {
  constructor(e) {
    super(e), this.context = 0, this.titleId = this.generateTitleId(), this.contentId = this.generateContentId(), this.showLicenseWatermark = !1, this.activeElement = null, this.onCloseDialog = (t) => {
      t.preventDefault(), F(this.props.onClose, t, this, void 0);
    }, this.onKeyDown = (t) => {
      t.keyCode === A.esc && this.props.onClose && (t.preventDefault(), this.onCloseDialog(t)), N(t, this.element);
    }, this.getCurrentZIndex = () => !this.state || this.context === void 0 ? this.context ? this.context : R : this.state.zIndex > (this.context ? this.context + h : 0) ? this.state.zIndex : this.context + h, this.getDocument = () => this.props.appendTo ? this.props.appendTo.ownerDocument : document, S(p), this.showLicenseWatermark = O(p), this.activeElement = L(document);
  }
  get _id() {
    return this.props.id + "-accessibility-id";
  }
  /**
   * @hidden
   */
  componentDidMount() {
    if (this.element) {
      if (this.props.autoFocus && !this.props.autoFocusedElement)
        this.element.focus();
      else if (this.props.autoFocus && this.props.autoFocusedElement)
        this.element.focus();
      else if (!this.props.autoFocus && this.props.autoFocusedElement) {
        const e = this.element.querySelector(
          this.props.autoFocusedElement
        );
        e && e.focus();
      } else {
        const e = [...P].map(
          (t) => t + ":not(.k-dialog-titlebar *)"
        );
        Z(this.element, e);
      }
      this.setState({
        zIndex: G(this.getCurrentZIndex(), this.getDocument(), this._id)
      });
    }
  }
  /**
   * @hidden
   */
  componentWillUnmount() {
    setTimeout(() => {
      var e;
      !this.element && this.activeElement && document && (document.contains(this.activeElement) ? this.activeElement.focus() : this.activeElement.id && ((e = document.getElementById(this.activeElement.id)) == null || e.focus()));
    });
  }
  /**
   * @hidden
   */
  render() {
    const e = this.props.id !== void 0 ? this.props.id : this.titleId, { title: t, width: m, height: u, children: g, minWidth: f, dir: y, style: I, contentStyle: E, modal: D = !0 } = this.props, r = o.Children.toArray(g), C = this.getContent(r), v = this.getActionBar(r), x = t ? {
      "aria-labelledby": e
    } : null, w = this.props.closeIcon !== void 0 ? this.props.closeIcon : !0, a = this.getCurrentZIndex(), l = /* @__PURE__ */ o.createElement(d.Provider, { value: a }, /* @__PURE__ */ o.createElement(
      "div",
      {
        [W]: this._id,
        className: "k-dialog-wrapper" + (this.props.className ? " " + this.props.className : ""),
        onKeyDown: this.onKeyDown,
        tabIndex: 0,
        dir: y,
        style: {
          zIndex: a,
          ...I
        },
        ref: (T) => this.element = T
      },
      D && /* @__PURE__ */ o.createElement("div", { className: "k-overlay", style: this.props.overlayStyle }),
      /* @__PURE__ */ o.createElement(
        "div",
        {
          ...x,
          className: _("k-window k-dialog", {
            [`k-window-${this.props.themeColor}`]: this.props.themeColor
          }),
          role: "dialog",
          "aria-labelledby": e,
          "aria-modal": !0,
          "aria-describedby": this.contentId,
          style: { width: m, height: u, minWidth: f }
        },
        this.props.title && /* @__PURE__ */ o.createElement(k, { closeIcon: w, onCloseButtonClick: this.onCloseDialog, id: e }, t),
        /* @__PURE__ */ o.createElement("div", { className: "k-window-content k-dialog-content", style: E, id: this.contentId }, C),
        v,
        this.showLicenseWatermark && /* @__PURE__ */ o.createElement(B, null)
      )
    ));
    return M ? this.props.appendTo !== null ? b.createPortal(l, this.props.appendTo || document.body) : l : null;
  }
  getActionBar(e) {
    return e.filter((t) => t && t.type === c);
  }
  getContent(e) {
    return e.filter((t) => t && t.type !== c);
  }
  generateTitleId() {
    return "dialog-title-" + this._id;
  }
  generateContentId() {
    return "dialog-content-" + this._id;
  }
};
i.displayName = "Dialog", i.propTypes = {
  title: s.any,
  id: s.string,
  dir: s.string,
  style: s.object,
  closeIcon: s.bool,
  width: s.oneOfType([s.number, s.string]),
  height: s.oneOfType([s.number, s.string]),
  minWidth: s.oneOfType([s.number, s.string]),
  autoFocus: s.bool
}, i.defaultProps = {
  autoFocus: !1
}, i.contextType = d;
let n = i;
const X = K(), j = U(
  z(
    X,
    n
  )
);
j.displayName = "KendoReactDialog";
export {
  j as Dialog,
  X as DialogPropsContext
};
