/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as e from "react";
import o from "prop-types";
import { validatePackage as q, Navigation as j, getActiveElement as h, disableNavigatableContainer as B, keepFocusInContainer as J, focusFirstFocusableChild as O, enableNavigatableContainer as Q, getTabIndex as U, classNames as E } from "@progress/kendo-react-common";
import { ButtonGroup as W, Button as u } from "@progress/kendo-react-buttons";
import { dropletSliderIcon as X, paletteIcon as Y, dropletSlashIcon as Z } from "@progress/kendo-svg-icons";
import { ColorPalette as $ } from "./ColorPalette.mjs";
import { ColorGradient as p } from "./ColorGradient.mjs";
import { packageMetadata as ee } from "../package-metadata.mjs";
import { useLocalization as ae } from "@progress/kendo-react-intl";
import { flatColorPickerColorGradientBtn as I, messages as m, flatColorPickerColorPaletteBtn as G, flatColorPickerClearBtn as L, flatColorPickerCancelBtn as te, flatColorPickerApplyBtn as oe } from "../messages/index.mjs";
const S = e.forwardRef((a, x) => {
  q(ee);
  const v = e.useRef(null), C = e.useRef(null), R = e.useRef(null), { defaultValue: r, showButtons: k = !0, showPreview: V = !0, showClearButton: F = !0 } = a, [c, T] = e.useState(
    (a.view || "ColorGradient") === "ColorGradient"
  ), [l, s] = e.useState(a.value || r || void 0), [i, b] = e.useState(a.value || r || void 0), f = a.value !== void 0 ? a.value : void 0;
  e.useEffect(() => {
    s(a.value);
  }, [a.value]);
  const g = ae(), y = e.useCallback(() => {
    v.current && v.current.focus();
  }, [v]);
  e.useImperativeHandle(
    v,
    () => ({
      element: C.current,
      focus: y,
      props: a,
      value: f
    }),
    [f, y, a]
  ), e.useImperativeHandle(x, () => v.current);
  const w = e.useCallback(
    (t) => {
      (t === "ColorGradient" && !c || t === "ColorPalette" && c) && T(!c);
    },
    [c]
  ), _ = e.useCallback(
    (t) => {
      if (r ? (s(r), b(r)) : (s(void 0), b(void 0)), a.onPreviewChange) {
        const n = {
          value: r || void 0,
          nativeEvent: t.nativeEvent,
          syntheticEvent: t
        };
        a.onPreviewChange.call(void 0, n);
      }
    },
    [r, a.onPreviewChange]
  ), P = e.useCallback(
    (t) => {
      if (s(t.value), a.onPreviewChange) {
        const n = {
          value: t.value,
          nativeEvent: t.nativeEvent,
          syntheticEvent: t.syntheticEvent
        };
        a.onPreviewChange.call(void 0, n);
      }
    },
    [a.onPreviewChange]
  ), M = e.useCallback(
    (t) => {
      if (l !== void 0 && b(l), a.onChange) {
        const n = {
          value: l,
          nativeEvent: t.nativeEvent,
          syntheticEvent: t
        };
        a.onChange.call(void 0, n);
      }
    },
    [l, a.onChange]
  ), K = e.useCallback(() => {
    s(i);
  }, [i]), z = e.useCallback(
    (t) => {
      if (s(i), a.onPreviewChange) {
        const n = {
          value: i,
          nativeEvent: t.nativeEvent,
          syntheticEvent: t
        };
        a.onPreviewChange.call(void 0, n);
      }
    },
    [i, a.onPreviewChange]
  ), A = e.useCallback(
    (t) => {
      var d;
      if ((!t.relatedTarget || !((d = C.current) != null && d.contains(t.relatedTarget))) && (!k && l !== void 0 && b(l), !k && a.onChange)) {
        const H = {
          value: l,
          nativeEvent: t.nativeEvent,
          syntheticEvent: t
        };
        a.onChange.call(void 0, H);
      }
    },
    [l, k, a.onChange]
  ), N = e.useMemo(
    () => new j({
      root: C,
      selectors: [".k-coloreditor"],
      tabIndex: 0,
      keyboardEvents: {
        keydown: {
          Tab: (t, n, d) => {
            h(document) === t ? B(t) : J(d, t);
          },
          Enter: (t, n, d) => {
            h(document) === t && (O(t), Q(t));
          },
          Escape: (t, n, d) => {
            h(document) !== t && (t.focus(), B(t));
          }
        }
      }
    }),
    []
  ), D = e.useCallback(N.triggerKeyboardEvent.bind(N), []);
  return /* @__PURE__ */ e.createElement(
    "div",
    {
      id: a.id,
      role: "textbox",
      "aria-label": a.ariaLabel,
      "aria-labelledby": a.ariaLabelledBy,
      "aria-disabled": a.disabled ? "true" : void 0,
      style: a.style,
      ref: C,
      tabIndex: U(a.tabIndex, a.disabled),
      className: E(
        "k-flatcolorpicker k-coloreditor",
        {
          "k-disabled": a.disabled
        },
        a.className
      ),
      onBlur: A,
      onKeyDown: D
    },
    a.header || /* @__PURE__ */ e.createElement("div", { className: "k-coloreditor-header k-hstack" }, /* @__PURE__ */ e.createElement("div", { className: "k-coloreditor-header-actions k-hstack" }, /* @__PURE__ */ e.createElement(W, { className: "k-button-group-flat" }, /* @__PURE__ */ e.createElement(
      u,
      {
        type: "button",
        "aria-label": g.toLanguageString(
          I,
          m[I]
        ),
        togglable: !0,
        fillMode: "flat",
        selected: c,
        onClick: () => w("ColorGradient"),
        icon: "droplet-slider",
        svgIcon: X
      }
    ), /* @__PURE__ */ e.createElement(
      u,
      {
        type: "button",
        "aria-label": g.toLanguageString(
          G,
          m[G]
        ),
        togglable: !0,
        fillMode: "flat",
        selected: !c,
        onClick: () => w("ColorPalette"),
        icon: "palette",
        svgIcon: Y
      }
    ))), /* @__PURE__ */ e.createElement("div", { className: "k-spacer" }), /* @__PURE__ */ e.createElement("div", { className: "k-coloreditor-header-actions k-hstack" }, F && /* @__PURE__ */ e.createElement(
      u,
      {
        type: "button",
        fillMode: "flat",
        onClick: _,
        "aria-label": g.toLanguageString(
          L,
          m[L]
        ),
        icon: "droplet-slash",
        svgIcon: Z
      }
    ), V && /* @__PURE__ */ e.createElement("div", { className: "k-coloreditor-preview k-vstack" }, /* @__PURE__ */ e.createElement(
      "span",
      {
        className: E("k-coloreditor-preview-color", "k-color-preview", {
          "k-no-color": f === void 0
        })
      },
      /* @__PURE__ */ e.createElement(
        "span",
        {
          className: "k-color-preview-mask",
          style: { background: l || void 0 }
        }
      )
    ), /* @__PURE__ */ e.createElement(
      "span",
      {
        className: E("k-coloreditor-current-color", "k-color-preview", {
          "k-no-color": i === void 0
        }),
        onClick: z
      },
      /* @__PURE__ */ e.createElement(
        "span",
        {
          className: "k-color-preview-mask",
          style: { background: i || void 0 }
        }
      )
    )))),
    /* @__PURE__ */ e.createElement("div", { className: "k-coloreditor-views k-vstack" }, c ? /* @__PURE__ */ e.createElement(
      p,
      {
        ref: R,
        role: "none",
        ariaLabel: void 0,
        value: l,
        onChange: P,
        opacity: a.opacity,
        format: a.format
      }
    ) : /* @__PURE__ */ e.createElement(
      $,
      {
        ariaDisabled: !0,
        ariaLabelledBy: "required_label",
        value: l,
        onChange: P
      }
    )),
    k && /* @__PURE__ */ e.createElement("div", { className: "k-coloreditor-footer k-actions k-actions-end k-actions-horizontal" }, /* @__PURE__ */ e.createElement(u, { type: "button", className: "k-coloreditor-cancel", onClick: K }, m[te]), /* @__PURE__ */ e.createElement(
      u,
      {
        type: "button",
        themeColor: "primary",
        className: "k-coloreditor-apply",
        onClick: M
      },
      m[oe]
    ))
  );
}), le = {
  id: o.string,
  style: o.any,
  className: o.string,
  value: o.string,
  defaultValue: o.string,
  onPreviewChange: o.func,
  onChange: o.func,
  opacity: o.bool,
  format: o.any,
  tabIndex: o.number,
  ariaLabel: o.string,
  ariaLabelledBy: o.string,
  disabled: o.bool,
  view: o.any,
  header: o.any,
  showClearButton: o.bool,
  showPreview: o.bool,
  showButtons: o.bool
};
S.displayName = "KendoFlatColorPicker";
S.propTypes = le;
export {
  S as FlatColorPicker
};
