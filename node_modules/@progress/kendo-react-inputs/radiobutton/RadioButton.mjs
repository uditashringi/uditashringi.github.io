/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as e from "react";
import a from "prop-types";
import { createPropsContext as S, validatePackage as U, usePropsContext as A, useUnstyled as G, useId as J, dispatchEvent as d, classNames as m, uRadioButton as b, getTabIndex as Q } from "@progress/kendo-react-common";
import { packageMetadata as V } from "../package-metadata.mjs";
const W = S(), P = e.forwardRef((R, x) => {
  U(V);
  const E = A(W, R), {
    ariaDescribedBy: F,
    checked: p,
    children: f,
    className: I,
    disabled: t,
    id: g,
    size: N = X.size,
    label: o,
    labelPlacement: z,
    name: T,
    style: q,
    tabIndex: w,
    value: r,
    valid: D,
    onChange: h,
    onFocus: c,
    onBlur: i,
    required: H,
    ...j
  } = E, y = G(), u = y && y.uRadioButton, l = e.useRef(null), C = e.useCallback(() => {
    l.current && l.current.focus();
  }, []), s = e.useCallback(
    () => ({
      element: l.current,
      focus: C
    }),
    [C]
  );
  e.useImperativeHandle(x, s);
  const v = J(), K = e.useCallback(
    (n) => {
      d(h, n, s(), {
        value: r
      });
    },
    [h, r, t]
  ), L = e.useCallback(
    (n) => {
      c && !t && d(
        c,
        n,
        s(),
        void 0
      );
    },
    [c, t]
  ), M = e.useCallback(
    (n) => {
      i && !t && d(i, n, s(), void 0);
    },
    [i, t]
  ), O = {
    type: "radio",
    id: g || v,
    name: T,
    className: m(
      b.input({
        c: u,
        size: N,
        invalid: D === !1,
        checked: p
      }),
      I
    ),
    ref: l,
    disabled: t,
    tabIndex: Q(w, t),
    checked: p,
    style: q,
    "aria-describedby": F,
    "aria-required": H,
    value: r,
    onChange: K,
    onFocus: L,
    onBlur: M,
    ...j
  }, B = /* @__PURE__ */ e.createElement(e.Fragment, null, o !== void 0 ? /* @__PURE__ */ e.createElement(
    "label",
    {
      className: m(b.label({ c: u })),
      htmlFor: g || v,
      style: { userSelect: "none" },
      "aria-label": o
    },
    o
  ) : null), k = /* @__PURE__ */ e.createElement("span", { className: m(b.wrap({ c: u })) }, /* @__PURE__ */ e.createElement("input", { ...O }));
  return z === "before" ? /* @__PURE__ */ e.createElement(e.Fragment, null, B, k, f) : /* @__PURE__ */ e.createElement(e.Fragment, null, k, B, f);
});
P.propTypes = {
  ariaDescribedBy: a.string,
  checked: a.bool,
  className: a.string,
  disabled: a.bool,
  id: a.string,
  size: a.oneOf([null, "small", "medium", "large"]),
  label: a.string,
  labelPlacement: a.string,
  name: a.string,
  style: a.object,
  tabIndex: a.number,
  value: a.any,
  valid: a.bool,
  onChange: a.func,
  onFocus: a.func,
  onBlur: a.func
};
const X = {
  size: "medium"
};
P.displayName = "KendoRadioButton";
export {
  P as RadioButton,
  W as RadioButtonPropsContext
};
