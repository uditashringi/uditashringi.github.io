/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as r from "react";
import { classNames as v, uCalendar as E } from "@progress/kendo-react-common";
const y = (l, e) => {
  const t = Object.getOwnPropertyNames(l), a = Object.getOwnPropertyNames(e);
  if (t.length !== a.length)
    return !1;
  for (let n = 0; n < t.length; n++) {
    const o = t[n];
    if (l[o] !== e[o])
      return !1;
  }
  return !0;
};
class L extends r.Component {
  constructor() {
    super(...arguments), this.handleClick = (e) => {
      const { onClick: t, value: a } = this.props;
      t && t.call(void 0, a, e);
    }, this.handleMouseEnter = () => {
      const { onMouseEnter: e, value: t } = this.props;
      e && e.call(void 0, t);
    }, this.handleMouseLeave = () => {
      const { onMouseLeave: e, value: t } = this.props;
      e && e.call(void 0, t);
    };
  }
  // Manually checking if the component needs an update
  // due to date object being compared by instance
  // and new Date object is created
  // every time and fails the shallow compare of the React.PureComponent.
  /**
   * @hidden
   */
  shouldComponentUpdate(e) {
    const { value: t, ...a } = this.props, { value: n, ...o } = e;
    return !((!(t && n) || t.getTime() === n.getTime()) && y(a, o));
  }
  /* eslint-disable max-len */
  render() {
    const {
      className: e,
      formattedValue: t,
      isWeekend: a,
      isFocused: n,
      isInRange: o,
      isSelected: d,
      isRangeStart: i,
      isRangeMid: f,
      isRangeEnd: c,
      isRangeSplitStart: C,
      isRangeSplitEnd: M,
      isToday: R,
      isDisabled: S,
      view: O,
      value: P,
      isOtherMonth: s,
      showOtherMonthDays: p,
      allowReverse: u,
      unstyled: h,
      ...N
    } = this.props, w = this.props.activeRangeEnd === "end" && c, k = this.props.activeRangeEnd === "start" && i, m = h && h.uCalendar, g = v(
      E.td({
        c: m,
        rangeStart: !s && !u && i,
        rangeEnd: !s && !u && c,
        rangeMid: !s && f,
        rangeSplitEnd: !s && M,
        rangeSplitStart: !s && C,
        active: k || w,
        focused: n,
        selected: !s && (d || i || c),
        today: !s && R,
        weekend: a,
        disabled: S,
        isOtherMonth: s,
        isEmpty: !p && s
      }),
      e
    );
    return !p && s ? /* @__PURE__ */ r.createElement("td", { role: "gridcell", className: g }) : /* @__PURE__ */ r.createElement(
      "td",
      {
        ...N,
        className: g,
        onClick: this.handleClick,
        onMouseEnter: this.handleMouseEnter,
        onMouseLeave: this.handleMouseLeave
      },
      /* @__PURE__ */ r.createElement("span", { className: v(E.link({ c: m })) }, this.props.children)
    );
  }
}
export {
  L as CalendarCell
};
