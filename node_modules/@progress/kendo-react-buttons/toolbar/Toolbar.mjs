/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as r from "react";
import c from "prop-types";
import { validatePackage as j, classNames as q, kendoThemeMaps as A, Keys as u } from "@progress/kendo-react-common";
import { toolbarButtons as B } from "../util.mjs";
import { packageMetadata as O } from "../package-metadata.mjs";
const v = r.forwardRef((i, C) => {
  j(O);
  const {
    children: E,
    className: H,
    id: M,
    ariaLabel: N,
    keyboardNavigation: b,
    role: h,
    onResize: k,
    dir: T,
    style: W,
    tabIndex: x = w.tabIndex,
    size: y = w.size
  } = i, I = r.useRef(!1), n = r.useRef(null), f = r.useRef(0), l = r.useRef(0), o = r.useRef([]), d = r.useMemo(() => i.buttons || B, [i.buttons]), K = r.useMemo(() => d.map((e) => e + ":focus").join(","), [d]), R = () => {
    const e = n.current && n.current.querySelector(K);
    return Math.max(
      0,
      o.current.findIndex((s) => s === e)
    );
  }, g = r.useRef({ element: null, props: i });
  r.useImperativeHandle(
    g,
    () => ({
      element: n.current,
      props: i
    })
  ), r.useImperativeHandle(C, () => g.current), r.useEffect(() => (window.addEventListener("resize", z), n.current && (l.current = n.current.offsetWidth, f.current = n.current.offsetHeight, b !== !1 && (o.current = Array.from(
    n.current.querySelectorAll(d.join(","))
  ), p(0))), () => {
    window.removeEventListener("resize", z), o.current.length = 0;
  }), []), r.useEffect(() => {
    if (I.current) {
      if (!n.current || b === !1)
        return;
      o.current = Array.from(
        n.current.querySelectorAll(d.join(","))
      ), p(R());
    } else
      I.current = !0;
  });
  const p = (e) => {
    o.current.forEach((s, t) => {
      s.tabIndex = t === e ? x : -1;
    });
  }, S = (e) => {
    const s = e.keyCode === u.left || e.keyCode === u.right || e.keyCode === u.home || e.keyCode === u.end, t = R();
    !s || e.defaultPrevented || o.current.findIndex((a) => a === e.target) === -1 || (e.keyCode === u.left ? m(t, t === 0 ? o.current.length - 1 : t - 1) : m(t, t === o.current.length - 1 ? 0 : t + 1), e.keyCode === u.home && m(t, 0), e.keyCode === u.end && m(t, o.current.length - 1));
  }, m = (e, s) => {
    const t = o.current[s];
    if (t) {
      t.tabIndex = x, t.focus();
      const a = o.current[e];
      a && (a.tabIndex = -1);
    }
  }, z = (e) => {
    if (!n.current)
      return;
    const s = n.current.offsetWidth, t = n.current.offsetHeight;
    if (l.current !== s || f.current !== t) {
      l.current = s, f.current = t;
      const a = { offsetWidth: l.current, offsetHeight: f.current };
      k && k.call(void 0, { target: g.current, ...a, nativeEvent: e });
    }
  };
  return /* @__PURE__ */ r.createElement(
    "div",
    {
      id: M,
      "aria-label": N,
      className: q(
        "k-toolbar k-toolbar-solid",
        {
          [`k-toolbar-${A.sizeMap[y] || y}`]: y
        },
        H
      ),
      style: W,
      role: h !== void 0 ? h || void 0 : "toolbar",
      dir: T,
      ref: n,
      onKeyDown: b !== !1 ? S : void 0
    },
    E
  );
}), w = {
  tabIndex: 0,
  size: "medium"
};
v.displayName = "KendoReactToolbar";
v.propTypes = {
  tabIndex: c.number,
  dir: c.string,
  keyboardNavigation: c.bool,
  style: c.object,
  className: c.string,
  role: c.string,
  onResize: c.func,
  buttons: c.arrayOf(c.string.isRequired),
  size: c.oneOf([null, "small", "medium", "large"])
};
export {
  v as Toolbar
};
