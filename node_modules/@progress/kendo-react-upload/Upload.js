/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";"use strict";Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"});const E=require("react"),e=require("prop-types"),C=require("@progress/kendo-react-common"),r=require("./interfaces/UploadFileStatus.js"),w=require("./UploadNavigation.js"),m=require("axios"),y=require("./utils/utils.js"),d=require("./utils/stateUtils.js"),f=require("./utils/connectionUtils.js"),O=require("./utils/validationUtils.js"),D=require("./package-metadata.js");function T(S){const c=Object.create(null,{[Symbol.toStringTag]:{value:"Module"}});if(S){for(const o in S)if(o!=="default"){const t=Object.getOwnPropertyDescriptor(S,o);Object.defineProperty(c,o,t.get?t:{enumerable:!0,get:()=>S[o]})}}return c.default=S,Object.freeze(c)}const R=T(E),g=class g extends R.Component{constructor(c){super(c),this._httpSubscriptions={},this._uploadNavigation=null,this.focus=()=>{this._uploadNavigation&&this._uploadNavigation.focus()},this.triggerUpload=()=>{this.onUpload()},this.uploadFiles=o=>{const t=this.async;d.setFilesStatus(o,r.UploadFileStatus.Uploading),d.groupForEach(o,(s,a)=>{const n=f.cloneRequestHeaders(t.saveHeaders||{}),l={target:this,files:s,headers:n,additionalData:{}};this.props.onBeforeUpload&&this.props.onBeforeUpload.call(void 0,l);const u=f.populateRequestOptions(l.headers,this.async),v=f.populateUploadFormData(s,t.saveField,l.additionalData);if(this.isCustomSave)this.props.saveUrl(s,{formData:v,requestOptions:u},this.onUploadProgress).then(h=>this.onUploadSuccess(h.uid)).catch(h=>this.onUploadError(h.uid));else{const h=m.CancelToken.source();this._httpSubscriptions[a]=h,m({method:t.saveMethod,url:t.saveUrl,data:v,cancelToken:h.token,...u,onUploadProgress:p=>this.onUploadProgress(a,p)}).then(p=>this.onUploadSuccess(a,p)).catch(p=>this.onUploadError(a,p))}})},this.removeFiles=o=>{const t=this.async;d.groupForEach(o,(s,a)=>{const n=f.cloneRequestHeaders(t.removeHeaders||{}),l={target:this,files:s,headers:n,additionalData:{}};this.props.onBeforeRemove&&this.props.onBeforeRemove.call(void 0,l);const u=s.map(p=>p.name),v=f.populateRequestOptions(l.headers,this.async),h=f.populateRemoveFormData(u,t.removeField,l.additionalData);this.isCustomRemove?this.props.removeUrl(s,{formData:h,requestOptions:v}).then(p=>this.onRemoveSuccess(p.uid)).catch(p=>this.onRemoveError(p.uid)):m({method:t.removeMethod,url:t.removeUrl,data:h,...v}).then(p=>this.onRemoveSuccess(a,p)).catch(p=>this.onRemoveError(a,p))})},this.onUpload=()=>{const o=this.fileStateCopy,t=d.groupFilesByUid(o),s=d.filesForUpload(t);this.uploadFiles(s);const a=()=>{if(this.props.onStatusChange){const n={target:this,newState:o,affectedFiles:d.flatFileGroup(s)};this.props.onStatusChange.call(void 0,n)}};this.isControlled?a():this.setState({files:o},a)},this.onAdd=o=>{let t=y.getAllFileInfo(o),s;if(t=y.assignGuidToFiles(t,this.async.batch),O.validateFiles(t,this.props.restrictions),this.props.multiple?s=this.fileStateCopy:s=[],d.addMany(t,s),this.async.autoUpload){const n=d.groupFilesByUid(s);this.uploadFiles(d.filesForUpload(n))}const a=()=>{if(this.props.onAdd){const n={target:this,newState:s,affectedFiles:t};this.props.onAdd.call(void 0,n)}};this.isControlled?a():this.setState({files:s},a)},this.onUploadProgress=(o,t)=>{const s=Math.round(100*t.loaded/(t.total||0))||0,a=this.fileStateCopy,n=a.filter(l=>l.uid===o);if(!n.length)return;n.forEach(l=>{l.progress=s});const i=()=>{if(this.props.onProgress){const l={target:this,newState:a,affectedFiles:n};this.props.onProgress.call(void 0,l)}};this.isControlled?i():this.setState({files:a},i)},this.onUploadSuccess=(o,t)=>{const s=this.fileStateCopy,a=s.filter(i=>i.uid===o);a.forEach(i=>{i.status=r.UploadFileStatus.Uploaded}),delete this._httpSubscriptions[o];const n=()=>{if(this.props.onStatusChange){const i={target:this,newState:s,affectedFiles:a,response:t?f.convertAxiosResponse(t):void 0};this.props.onStatusChange.call(void 0,i)}};this.isControlled?n():this.setState({files:s},n)},this.onUploadError=(o,t)=>{const s=this.fileStateCopy,a=s.filter(i=>i.uid===o);if(a.forEach(i=>{i.status=r.UploadFileStatus.UploadFailed}),delete this._httpSubscriptions[o],!a.length)return;const n=()=>{if(this.props.onStatusChange){const i={target:this,newState:s,affectedFiles:a,response:t?f.convertAxiosResponse(t):void 0};this.props.onStatusChange.call(void 0,i)}};this.isControlled?n():this.setState({files:s},n)},this.onRemove=o=>{const t=this.fileStateCopy,s=t.filter(i=>i.uid===o),a=t.filter(i=>i.uid!==o);if([r.UploadFileStatus.Uploaded,r.UploadFileStatus.Initial,r.UploadFileStatus.RemoveFailed].indexOf(s[0].status)>-1){const i={[o]:s};d.setFilesStatus(i,r.UploadFileStatus.Removing),this.removeFiles(i);const l=()=>{if(this.props.onStatusChange){const u={target:this,newState:t,affectedFiles:s};this.props.onStatusChange.call(void 0,u)}};this.isControlled?l():this.setState({files:t},l)}else{const i=()=>{if(this.props.onRemove){const l={target:this,newState:a,affectedFiles:s};this.props.onRemove.call(void 0,l)}};this.isControlled?i():this.setState({files:a},i)}},this.onRemoveSuccess=(o,t)=>{const s=this.fileStateCopy,a=s.filter(l=>l.uid===o),n=s.filter(l=>l.uid!==o),i=()=>{if(this.props.onRemove){const l={target:this,newState:n,affectedFiles:a,response:t?f.convertAxiosResponse(t):void 0};this.props.onRemove.call(void 0,l)}};this.isControlled?i():this.setState({files:n},i)},this.onRemoveError=(o,t)=>{const s=this.fileStateCopy,a=s.filter(i=>i.uid===o);a.forEach(i=>{i.status=r.UploadFileStatus.RemoveFailed});const n=()=>{if(this.props.onStatusChange){const i={target:this,newState:s,affectedFiles:a,response:t?f.convertAxiosResponse(t):void 0};this.props.onStatusChange.call(void 0,i)}};this.isControlled?n():this.setState({files:s},n)},this.onRetry=o=>{const t=this.fileStateCopy,s=d.groupFilesByUid(t.filter(n=>n.uid===o));d.setFilesStatus(s,r.UploadFileStatus.Uploading),this.uploadFiles(s);const a=()=>{if(this.props.onStatusChange){const n={target:this,newState:t,affectedFiles:d.flatFileGroup(s)};this.props.onStatusChange.call(void 0,n)}};this.isControlled?a():this.setState({files:t},a)},this.onCancel=o=>{const t=this.fileStateCopy,s=t.filter(i=>i.uid!==o),a=t.filter(i=>i.uid===o);if(this._httpSubscriptions[o]&&(this._httpSubscriptions[o].cancel(),delete this._httpSubscriptions[o]),this.props.onCancel){const i={target:this,uid:o};this.props.onCancel.call(void 0,i)}const n=()=>{if(this.props.onRemove){const i={target:this,newState:s,affectedFiles:a};this.props.onRemove.call(void 0,i)}};this.isControlled?n():this.setState({files:s},n)},this.onClear=()=>{if(!this.files.length)return;Object.keys(this._httpSubscriptions).forEach(t=>{this._httpSubscriptions[t].cancel()}),this._httpSubscriptions={};const o=()=>{if(this.props.onRemove){const t={target:this,newState:[],affectedFiles:this.fileStateCopy};this.props.onRemove.call(void 0,t)}};this.isControlled?o():this.setState({files:[]},o)},C.validatePackage(D.packageMetadata),this.state={files:c.defaultFiles||[]}}get async(){const{autoUpload:c,batch:o,removeField:t,removeHeaders:s,removeMethod:a,removeUrl:n,responseType:i,saveField:l,saveHeaders:u,saveMethod:v,saveUrl:h,withCredentials:p}=this.props;return{autoUpload:c,batch:o,removeField:t,removeHeaders:s,removeMethod:a,removeUrl:n,responseType:i,saveField:l,saveHeaders:u,saveMethod:v,saveUrl:h,withCredentials:p}}get files(){return(this.isControlled?this.props.files:this.state.files)||[]}get isControlled(){return!this.props.defaultFiles}get isCustomSave(){return this.props.saveUrl&&typeof this.props.saveUrl=="function"}get isCustomRemove(){return this.props.removeUrl&&typeof this.props.removeUrl=="function"}get fileStateCopy(){return this.isControlled?d.copyState(this.props.files):d.copyState(this.state.files)}get actionElement(){if(this._uploadNavigation)return this._uploadNavigation.actionElement}render(){var U;const{showFileList:c,onAdd:o,onRemove:t,onCancel:s,autoUpload:a,showActionButtons:n,actionsLayout:i,tabIndex:l,disabled:u,...v}=this.props,h=d.groupFilesByUid(this.files),p=d.filesForUpload(h);return R.createElement(w.UploadNavigation,{groupedFiles:h,className:this.props.className,showFileList:c&&!!Object.keys(h).length,showActionButtons:n&&!a&&(!!Object.keys(p).length||!!((U=this.props.defaultFiles)!=null&&U.length)),actionsLayout:i,autoUpload:a,disabled:u,onAdd:this.onAdd,onRemove:this.onRemove,onClear:this.onClear,onUpload:this.onUpload,onRetry:this.onRetry,onCancel:this.onCancel,tabIndex:C.getTabIndex(l,u),ref:b=>this._uploadNavigation=b,...v})}};g.defaultProps={autoUpload:!0,batch:!1,removeField:"fileNames",removeHeaders:{},removeMethod:"POST",removeUrl:"",responseType:"json",saveField:"files",saveHeaders:{},saveMethod:"POST",saveUrl:"",withCredentials:!0,restrictions:{allowedExtensions:[],maxFileSize:0,minFileSize:0},multiple:!0,showFileList:!0,showActionButtons:!0,actionsLayout:"end",disabled:!1},g.propTypes={autoUpload:e.bool,batch:e.bool,withCredentials:e.bool,saveField:e.string,saveHeaders:e.object,saveMethod:e.string,saveUrl:e.oneOfType([e.string,e.func]),responseType:e.oneOf(["arraybuffer","blob","json","text"]),removeField:e.string,removeHeaders:e.object,removeMethod:e.string,removeUrl:e.oneOfType([e.string,e.func]),multiple:e.bool,disabled:e.bool,showFileList:e.bool,showActionButtons:e.bool,actionsLayout:e.oneOf(["start","center","end","stretched"]),tabIndex:e.number,accept:e.string,listItemUI:e.oneOfType([e.func,e.string,e.shape({render:e.func.isRequired})]),restrictions:e.shape({allowedExtensions:e.arrayOf(e.string),maxFileSize:e.number,minFileSize:e.number}),files:e.arrayOf(e.shape({uid:e.string,name:e.string,extension:e.string,size:e.number,validationErrors:e.arrayOf(e.string),status:e.oneOf([r.UploadFileStatus.Initial,r.UploadFileStatus.RemoveFailed,r.UploadFileStatus.Removing,r.UploadFileStatus.Selected,r.UploadFileStatus.UploadFailed,r.UploadFileStatus.Uploaded,r.UploadFileStatus.Uploading]),progress:e.number,getRawFile:e.func})),defaultFiles:e.arrayOf(e.shape({uid:e.string,name:e.string,extension:e.string,size:e.number,validationErrors:e.arrayOf(e.string),status:e.oneOf([r.UploadFileStatus.Initial,r.UploadFileStatus.RemoveFailed,r.UploadFileStatus.Removing,r.UploadFileStatus.Selected,r.UploadFileStatus.UploadFailed,r.UploadFileStatus.Uploaded,r.UploadFileStatus.Uploading]),progress:e.number,getRawFile:e.func}))};let F=g;exports.Upload=F;
