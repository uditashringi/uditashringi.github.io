/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as e from "react";
import a from "prop-types";
import { validatePackage as S, classNames as H, getTabIndex as L, IconWrap as A } from "@progress/kendo-react-common";
import { uploadIcon as M } from "@progress/kendo-svg-icons";
import { IntlService as _, useLocalization as K } from "@progress/kendo-react-intl";
import { dropZoneHint as v, messages as m, dropZoneNote as p, restrictionsDropZoneNote as b } from "./messages/index.mjs";
import { packageMetadata as P } from "./package-metadata.mjs";
const x = 100, R = e.forwardRef((n, k) => {
  S(P);
  const f = e.useRef(null), l = e.useRef(null), s = e.useRef(null), i = e.useRef(!1), c = e.useRef(null), { uploadRef: r } = n, d = r.current, [I, E] = e.useState(!1), g = e.useMemo(() => new _("en"), []), u = K(), N = u.toLanguageString(v, m[v]), [O, z] = e.useState(
    u.toLanguageString(p, m[p])
  ), h = n.customHint || /* @__PURE__ */ e.createElement("span", null, N), T = n.customNote || /* @__PURE__ */ e.createElement("span", null, O), y = e.useCallback(() => {
    l.current && l.current.focus();
  }, [l]);
  e.useImperativeHandle(f, () => ({
    element: l.current,
    focus: y,
    props: n
  })), e.useImperativeHandle(k, () => f.current), e.useEffect(() => {
    if (d) {
      const t = d.props.restrictions.allowedExtensions;
      if (t && t.length) {
        const o = g.format(
          u.toLanguageString(b, m[b]),
          [t]
        );
        z(o);
      }
    }
  }, [d, u, g]);
  const D = e.useCallback((t) => (/* @__PURE__ */ new Date()).getTime() - (t || /* @__PURE__ */ new Date()).getTime() > x, []), Z = e.useCallback(
    (t) => {
      t.preventDefault();
      const o = t.dataTransfer.files;
      o.length > 0 && !n.disabled && r && r.current && (r.current.onAdd && (t.preventDefault(), r.current.onAdd(o)), n.onDrop && n.onDrop.call(void 0, t));
    },
    [n.disabled, r, n.onDrop]
  ), w = e.useCallback(
    (t) => {
      if (i) {
        i.current = !0;
        const o = () => {
          D(c.current) && (E(!1), i.current = !1, clearInterval(s.current), s.current = null, c.current = null);
        };
        s.current = setInterval(o, x);
      }
      n.onElementDragEnter && n.onElementDragEnter.call(void 0, t);
    },
    [i, s, c, D, n.onElementDragEnter]
  ), C = e.useCallback(
    (t) => {
      t.preventDefault(), c.current = /* @__PURE__ */ new Date(), E(!0), n.onElementDragOver && n.onElementDragOver.call(void 0, t);
    },
    [c, n.onElementDragOver]
  );
  return /* @__PURE__ */ e.createElement(
    "div",
    {
      ref: l,
      id: n.id,
      className: H(
        "k-external-dropzone",
        {
          "k-external-dropzone-hover": I,
          "k-disabled": n.disabled
        },
        n.className
      ),
      tabIndex: L(n.tabIndex, n.disabled, void 0),
      onDrop: Z,
      onDragEnter: w,
      onDragOver: C
    },
    /* @__PURE__ */ e.createElement("div", { style: n.style, className: "k-dropzone-inner" }, /* @__PURE__ */ e.createElement(A, { name: "upload", icon: M, className: "k-dropzone-icon", size: "xxxlarge" }), /* @__PURE__ */ e.createElement("span", { className: "k-dropzone-hint" }, h), /* @__PURE__ */ e.createElement("span", { className: "k-dropzone-note" }, T))
  );
}), W = {
  id: a.string,
  tabIndex: a.number,
  editorRef: a.oneOfType([a.func, a.shape({ current: a.any })]),
  disabled: a.bool,
  onDrop: a.func,
  onElementDragEnter: a.func,
  onElementDragOver: a.func
};
R.displayName = "KendoReactExternalDropZone";
R.propTypes = W;
export {
  R as ExternalDropZone
};
