/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as a from "react";
import e from "prop-types";
import { validatePackage as E, useUnstyled as D, classNames as R, uLabel as h } from "@progress/kendo-react-common";
import { labelsOptional as p, messages as z } from "./messages/index.mjs";
import { useLocalization as O } from "@progress/kendo-react-intl";
import { packageMetadata as T } from "./package-metadata.mjs";
const u = (b) => {
  E(T);
  const { id: f, editorId: y, editorRef: t, editorDisabled: o, children: l, editorValid: s, style: g, className: i, optional: k } = b, L = O(), n = k ? L.toLanguageString(p, z[p]) : "", N = n && /* @__PURE__ */ a.createElement("span", { className: "k-label-optional" }, n), r = D(), c = r && r.uLabel, v = a.useCallback(
    (d) => {
      if (t && t.current && !o) {
        t.current.focus && (d.preventDefault(), t.current.focus());
        const m = t.current.actionElement;
        m && (d.preventDefault(), m.click());
      }
    },
    [t]
  ), C = a.useMemo(
    () => R(
      h.label({
        c,
        empty: !l,
        invalid: s === !1,
        disabled: o === !0
      }),
      i
    ),
    [c, l, s, o, i]
  );
  return /* @__PURE__ */ a.createElement("label", { id: f, htmlFor: y, onClick: v, style: g, className: C }, l, N);
};
u.propTypes = {
  id: e.string,
  editorId: e.string,
  editorRef: e.oneOfType([e.func, e.shape({ current: e.any })]),
  editorValid: e.bool,
  editorDisabled: e.bool,
  style: e.object,
  className: e.string,
  optional: e.bool
};
u.displayName = "KendoReactLabel";
export {
  u as Label
};
