/**
 * @license
 *-------------------------------------------------------------------------------------------
 * Copyright Â© 2024 Progress Software Corporation. All rights reserved.
 * Licensed under commercial license. See LICENSE.md in the package root for more information
 *-------------------------------------------------------------------------------------------
 */
"use client";
import * as l from "react";
import e from "prop-types";
import { validatePackage as T, classNames as g, uFloatingLabel as N } from "@progress/kendo-react-common";
import { useLocalization as B } from "@progress/kendo-react-intl";
import { labelsOptional as y, messages as D } from "./messages/index.mjs";
import { packageMetadata as I } from "./package-metadata.mjs";
const R = (a) => {
  T(I);
  const [s, i] = l.useState({
    focused: !1
  }), h = (O) => {
    i({ focused: !0 });
  }, E = (O) => {
    i({ focused: !1 });
  }, {
    label: o,
    editorId: n,
    className: F,
    labelClassName: L,
    editorValue: r,
    editorPlaceholder: C,
    editorValid: P,
    editorDisabled: c,
    style: S,
    id: d,
    optional: V,
    unstyled: m,
    ...k
  } = a, v = B(), u = V ? v.toLanguageString(y, D[y]) : "", b = u && /* @__PURE__ */ l.createElement("span", { className: "k-label-optional" }, u), p = m && m.uFloatingLabel, t = !C && !r && r !== 0, z = g(
    N.wrapper({
      c: p,
      focused: s.focused,
      empty: t,
      notEmpty: !t,
      disabled: c,
      isRtl: a.dir === "rtl"
    }),
    F
  ), f = g(
    N.label({
      c: p,
      focused: s.focused,
      empty: t,
      notEmpty: !t,
      invalid: P === !1,
      disabled: c
    }),
    L
  );
  return /* @__PURE__ */ l.createElement(
    "span",
    {
      ...k,
      id: a.id,
      className: z,
      onFocus: h,
      onBlur: E,
      style: S,
      dir: a.dir
    },
    a.children,
    o ? n ? /* @__PURE__ */ l.createElement("label", { id: d, htmlFor: n, className: f }, o, b) : /* @__PURE__ */ l.createElement("span", { id: d, className: f }, o, b) : null
  );
};
R.propTypes = {
  label: e.string,
  editorId: e.string,
  editorValue: e.oneOfType([e.string, e.bool, e.number]),
  editorPlaceholder: e.string,
  editorValid: e.bool,
  editorDisabled: e.bool,
  id: e.string,
  style: e.object,
  className: e.string,
  labelClassName: e.string,
  optional: e.bool
};
export {
  R as FloatingLabel
};
