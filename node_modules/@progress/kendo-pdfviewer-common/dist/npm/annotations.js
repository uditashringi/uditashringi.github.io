"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkAnnotation = void 0;
const utils_1 = require("./utils");
class Annotation {
    constructor(container, viewport, annotation, pdfDoc, zoom, rootElement) {
        this.container = container;
        this.viewport = viewport;
        this.zoom = zoom;
        this.annotation = annotation;
        this.pdfDoc = pdfDoc;
        this.rootElement = rootElement;
    }
    destroy() {
    }
}
class LinkAnnotation extends Annotation {
    constructor(container, viewport, annotation, pdfDoc, zoom, rootElement) {
        super(container, viewport, annotation, pdfDoc, zoom, rootElement);
        this.onLinkClick = (e) => {
            const destination = e.target.getAttribute('href');
            if (destination && destination.indexOf('#') === 0) {
                this.navigateToDestination(destination);
                e.preventDefault();
            }
        };
        this.linkElement = null;
        this.renderAnnotation();
        this.bindEvents();
    }
    destroy() {
        this.unbindEvents();
    }
    bindEvents() {
        this.linkElement.addEventListener('click', this.onLinkClick);
    }
    unbindEvents() {
        this.linkElement.removeEventListener('click', this.onLinkClick);
    }
    navigateToDestination(destination) {
        const dest = destination.split('#')[1];
        this.pdfDoc.getDestination(dest).then(r => {
            this.pdfDoc.getPageIndex(r[0]).then(i => this.goToPage(i));
        });
    }
    goToPage(pageNumber) {
        (0, utils_1.scrollToPage)(this.rootElement, pageNumber);
    }
    renderAnnotation() {
        const annotation = this.annotation, viewport = this.viewport, rect = annotation.rect, boundingRect = [
            [rect[0], rect[1]],
            [rect[2], rect[3]]
        ], rawHeight = viewport.rawDims.pageHeight;
        const left = Math.min(boundingRect[0][0], boundingRect[1][0]) * this.zoom, top = (rawHeight - Math.max(boundingRect[0][1], boundingRect[1][1])) * this.zoom, width = (boundingRect[1][0] - boundingRect[0][0]) * this.zoom, height = (boundingRect[1][1] - boundingRect[0][1]) * this.zoom;
        const url = annotation.url || (annotation.dest && `#${encodeURI(annotation.dest)}`);
        const annotationElement = (0, utils_1.createElement)('span', '', {
            position: 'absolute',
            left: left + 'pt',
            top: top + 'pt'
        });
        const linkElement = this.linkElement = (0, utils_1.createElement)('a', '', {
            width: width + 'pt',
            height: height + 'pt',
            display: 'inline-block',
            pointerEvents: 'auto'
        });
        linkElement.setAttribute('href', url);
        annotationElement.append(linkElement);
        this.container.append(annotationElement);
    }
}
exports.LinkAnnotation = LinkAnnotation;
